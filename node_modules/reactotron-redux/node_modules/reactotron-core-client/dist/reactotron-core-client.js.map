{"version":3,"file":"reactotron-core-client.js","sources":["../src/serialize.ts","../src/plugins/logger.ts","../src/plugins/image.ts","../src/plugins/state-responses.ts","../src/plugins/clear.ts","../src/stopwatch.ts"],"sourcesContent":["// JSON.stringify() doesn't support circular dependencies or keeping\n// falsy values.  This does.\n//\n// Mostly adapted from https://github.com/isaacs/json-stringify-safe\n\n// replacement tokens\nconst UNDEFINED = \"~~~ undefined ~~~\"\nconst NULL = `~~~ null ~~~`\nconst FALSE = `~~~ false ~~~`\nconst ZERO = `~~~ zero ~~~`\nconst EMPTY_STRING = `~~~ empty string ~~~`\nconst CIRCULAR = \"~~~ Circular Reference ~~~\"\nconst ANONYMOUS = \"~~~ anonymous function ~~~\"\nconst INFINITY = \"~~~ Infinity ~~~\"\nconst NEGATIVE_INFINITY = \"~~~ -Infinity ~~~\"\n// const NAN = '~~~ NaN ~~~'\n\n/**\n * Attempts to give a name to a function.\n *\n * @param {Function} fn - The function to name.\n */\nfunction getFunctionName(fn: any): string {\n  const n = fn.name\n  if (n === null || n === undefined || n === \"\") {\n    return ANONYMOUS\n  } else {\n    return `~~~ ${n}() ~~~`\n  }\n}\n\n/**\n * Serializes an object to JSON.\n *\n *  @param {any} source - The victim.\n */\nfunction serialize(source) {\n  const stack = []\n  const keys = []\n\n  /**\n   * Replace this object node with something potentially custom.\n   *\n   * @param {*} key - The key currently visited.\n   * @param {*} value - The value to replace.\n   */\n  function serializer(replacer) {\n    return function(this: any, key, value) {\n      // slam dunks\n      if (value === true) return true\n\n      // weird stuff\n      // if (Object.is(value, NaN)) return NAN // OK, apparently this is hard... leaving out for now\n      if (value === Infinity) return INFINITY\n      if (value === -Infinity) return NEGATIVE_INFINITY\n      if (value === 0) return ZERO\n\n      // classic javascript\n      if (value === undefined) return UNDEFINED\n      if (value === null) return NULL\n      if (value === false) return FALSE\n\n      // head shakers\n      if (value === -0) return ZERO // eslint-disable-line\n      if (value === \"\") return EMPTY_STRING\n\n      // known types that have easy resolving\n      switch (typeof value) {\n        case \"string\":\n          return value\n        case \"number\":\n          return value\n        case \"function\":\n          return getFunctionName(value)\n      }\n\n      if (stack.length > 0) {\n        // check for prior existance\n        const thisPos = stack.indexOf(this)\n        ~thisPos ? stack.splice(thisPos + 1) : stack.push(this)\n        ~thisPos ? keys.splice(thisPos, Infinity, key) : keys.push(key)\n        if (~stack.indexOf(value)) value = CIRCULAR\n      } else {\n        stack.push(value)\n      }\n\n      return replacer == null ? value : replacer.call(this, key, value)\n    }\n  }\n\n  return JSON.stringify(source, serializer(null))\n}\n\nexport default serialize\n","/**\n * Provides 4 features for logging.  log & debug are the same.\n */\nexport default () => reactotron => {\n  return {\n    features: {\n      log: (...args) => {\n        const content = (args && args.length === 1) ? args[0] : args\n        reactotron.send(\"log\", { level: \"debug\", message: content }, false)\n      },\n      logImportant: (...args) => {\n        const content = (args && args.length === 1) ? args[0] : args\n        reactotron.send(\"log\", { level: \"debug\", message: content }, true)\n      },\n      debug: (message, important = false) =>\n        reactotron.send(\"log\", { level: \"debug\", message }, !!important),\n      warn: message => reactotron.send(\"log\", { level: \"warn\", message }, true),\n      error: (message, stack) => reactotron.send(\"log\", { level: \"error\", message, stack }, true),\n    },\n  }\n}\n","/**\n * Provides an image.\n */\nexport default () => reactotron => {\n  return {\n    features: {\n      // expanded just to show the specs\n      image: ({ uri, preview, filename, width, height, caption }) =>\n        reactotron.send(\"image\", { uri, preview, filename, width, height, caption }),\n    },\n  }\n}\n","/**\n * Provides helper functions for send state responses.\n */\nexport default () => reactotron => {\n  return {\n    features: {\n      stateActionComplete: (name, action, important = false) =>\n        reactotron.send(\"state.action.complete\", { name, action }, !!important),\n\n      stateValuesResponse: (path, value, valid = true) =>\n        reactotron.send(\"state.values.response\", { path, value, valid }),\n\n      stateKeysResponse: (path, keys, valid = true) =>\n        reactotron.send(\"state.keys.response\", { path, keys, valid }),\n\n      stateValuesChange: changes => reactotron.send(\"state.values.change\", { changes }),\n\n      // sends the state backup over to the server\n      stateBackupResponse: state => reactotron.send(\"state.backup.response\", { state }),\n    },\n  }\n}\n","/**\n * Clears the reactotron server.\n */\nexport default () => reactotron => {\n  return {\n    features: {\n      clear: () => reactotron.send(\"clear\"),\n    },\n  }\n}\n","/// <reference types=\"node\" />\n\ndeclare var global: any\n\nconst hasHirezNodeTimer =\n  false &&\n  typeof process === \"object\" &&\n  process &&\n  process.hrtime &&\n  typeof process.hrtime === \"function\"\n\n// the default timer\nconst defaultPerformanceNow = (started?: number) => Date.now()\n\n// try to find the browser-based performance timer\nconst nativePerformance =\n  typeof window !== \"undefined\" &&\n  window &&\n  (window.performance || (window as any).msPerformance || (window as any).webkitPerformance)\n\n// the function we're trying to assign\nlet performanceNow = defaultPerformanceNow\n\n// accepts an already started time and returns the number of milliseconds\nlet delta = (started: number) => performanceNow() - started\n\nif (hasHirezNodeTimer) {\n  performanceNow = process.hrtime as any\n  delta = started => performanceNow(started)[1] / 1000000\n} else if (global.nativePerformanceNow) {\n  // react native 47\n  performanceNow = global.nativePerformanceNow\n} else if (nativePerformance) {\n  // browsers + safely check for react native < 47\n  performanceNow = () => nativePerformance.now && nativePerformance.now()\n}\n\n/**\n * Starts a lame, low-res timer.  Returns a function which when invoked,\n * gives you the number of milliseconds since passing.  ish.\n */\nexport const start = () => {\n  //  record the start time\n  const started = performanceNow()\n  return () => delta(started)\n}\n"],"names":["fn","n","name","undefined","ANONYMOUS","source","stack","keys","JSON","stringify","replacer","key","value","Infinity","INFINITY","NEGATIVE_INFINITY","ZERO","UNDEFINED","NULL","FALSE","EMPTY_STRING","getFunctionName","length","thisPos","indexOf","this","splice","push","CIRCULAR","call","serializer","reactotron","features","log","_i","args","content","send","level","message","logImportant","debug","important","warn","error","image","_a","uri","preview","filename","width","height","caption","stateActionComplete","action","stateValuesResponse","path","valid","stateKeysResponse","stateValuesChange","changes","stateBackupResponse","state","clear","hasHirezNodeTimer","defaultPerformanceNow","started","Date","now","nativePerformance","window","performance","msPerformance","webkitPerformance","performanceNow","delta","process","hrtime","global","nativePerformanceNow","start"],"mappings":"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"}